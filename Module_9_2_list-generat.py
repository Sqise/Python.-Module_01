# Задача 1: Фабрика Функций
# Написать функцию, которая возвращает различные математические функции
# (например, деление, умножение) в зависимости от переданных аргументов.
def operation(sign):
    if sign == "+":
        def plus(x, y):
            return x + y

        return plus  # возвращаем функцию как объект!! Тут скобки не нужны
    if sign == "-":
        def minus(x, y):
            return x - y

        return minus
    if sign == "*":
        def umnozh(x, y):
            return x * y

        return umnozh
    if sign == "/":
        def razdel(x, y):
            return x / y

        return razdel


sign = input("Введите одну из операций: '+', '-', '/' или '*': ")
result = operation(sign)
print(f'Результат операции: {result(10, 5)}')

# Задача 2: Лямбда-Функции
# Использовать лямбда-функцию для реализации простой операции и написать
# такую же функцию с использованием def. Например, возведение числа в квадрат


kub_ = lambda a: a ** 3
print(f'Куб аргумента: {kub_(9)}')


def kub_def(aa):
    return aa ** 3


print(f'Куб аргумента: {kub_def(9)}')


# Задача 3: Вызываемые Объекты
# Создать класс с Rect c полями a, b которые задаются в __init__ и методом
# __call__, # который возвращает площадь прямоугольника, то есть a*b.

# В Python у класса может быть метод __call__, что позволяет его экземплярам
# вести себя как функции. Это дает возможность создавать объекты,
# которые могут быть вызваны как функции и хранить состояние между вызовами.

class Rect:
    def __init__(self, a_side, b_side):
        self.a = a_side
        self.b = b_side

    def __call__(self):
        return self.a * self.b


rect1 = Rect(8, 7)
print(f'Площадь прямоугольника: {rect1()}')
